From bbee564455433eca486551b5e3b956da88c9d3c7 Mon Sep 17 00:00:00 2001
From: Hans Christian Lonstad <60462772+hcl-dr@users.noreply.github.com>
Date: Tue, 15 Dec 2020 18:21:49 +0100
Subject: [PATCH 1/3] Add pwm and function mux

---
 drivers/misc/Kconfig           |  19 +++
 drivers/misc/Makefile          |   3 +
 drivers/misc/dt-function-mux.c | 204 +++++++++++++++++++++++++++++++++
 drivers/misc/modulated_pwm.c   | 147 ++++++++++++++++++++++++
 drivers/misc/pwm_buzzer.c      | 143 +++++++++++++++++++++++
 5 files changed, 516 insertions(+)
 create mode 100644 drivers/misc/dt-function-mux.c
 create mode 100644 drivers/misc/modulated_pwm.c
 create mode 100644 drivers/misc/pwm_buzzer.c

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 0f5a49fc7c9e..7277b7147b4e 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -470,6 +470,25 @@ config HISI_HIKEY_USB
 	  switching between the dual-role USB-C port and the USB-A host ports
 	  using only one USB controller.
 
+config MODULATED_PWM
+	tristate "Modulated PWM"
+	default n
+	help
+		Modulated PWM with 8 bit resolution
+
+config OF_FUNCTION_PINMUX
+	tristate "Function Pinmux"
+	default n
+	depends on OF && PINMUX && PINCTRL
+	help
+		Function multiplexer for pads
+
+config PWM_BUZZER
+	tristate "PWM Buzzer"
+	default n
+	help
+		PWM sound Buzzer
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index a086197af544..de3183c4ba75 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -59,3 +59,6 @@ obj-$(CONFIG_UACCE)		+= uacce/
 obj-$(CONFIG_XILINX_SDFEC)	+= xilinx_sdfec.o
 obj-$(CONFIG_HISI_HIKEY_USB)	+= hisi_hikey_usb.o
 obj-$(CONFIG_HI6421V600_IRQ)	+= hi6421v600-irq.o
+obj-$(CONFIG_MODULATED_PWM) += modulated_pwm.o
+obj-$(CONFIG_OF_FUNCTION_PINMUX) += dt-function-mux.o
+obj-$(CONFIG_PWM_BUZZER) += pwm_buzzer.o
diff --git a/drivers/misc/dt-function-mux.c b/drivers/misc/dt-function-mux.c
new file mode 100644
index 000000000000..8bfe0f1cbfb8
--- /dev/null
+++ b/drivers/misc/dt-function-mux.c
@@ -0,0 +1,204 @@
+/*
+ * Simple PWM buzzer
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/err.h>
+#include <linux/slab.h>
+#include <linux/pinctrl/pinctrl.h>
+
+
+#define MAX_HANDLES 2
+struct fmux_data {
+	struct device *dev;
+	const char* names[MAX_HANDLES];
+	int num_handles;
+	struct pinctrl *pinc;
+	struct pinctrl_state *pstate[MAX_HANDLES];
+	int active;
+};
+
+static DEFINE_MUTEX(sysfs_lock);
+
+
+static int fmux_reparse(struct fmux_data *priv)
+{
+	int ret;
+	int n;
+	ret = of_property_count_strings(priv->dev->of_node, "pinctrl-names");
+	if ( ret < 0 || ret > MAX_HANDLES) {
+		dev_err(priv->dev, "Wrong number of mux options or bad name string [%d]\n", ret);
+		return -EINVAL;
+	}
+
+	priv->num_handles = ret;
+	for (n=0; n < priv->num_handles; n++) {
+		ret = of_property_read_string_index(priv->dev->of_node, "pinctrl-names", n, &priv->names[n]);
+	}
+	return ret;
+}
+
+static int fmux_match(struct fmux_data *priv, const char* s)
+{
+	int n;
+	for (n=0; n < priv->num_handles; n++) {
+		if (strcmp(priv->names[n], s) == 0)
+			return n;
+	}
+	return -EINVAL;
+}
+
+static ssize_t fmux_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct fmux_data *priv = dev_get_drvdata(dev);
+	ssize_t status=0;
+	mutex_lock(&sysfs_lock);
+	status = sprintf(buf, priv->names[priv->active]);
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static ssize_t fmux_opt_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	struct fmux_data *priv = dev_get_drvdata(dev);
+	ssize_t status=0;
+	int n;
+	mutex_lock(&sysfs_lock);
+	for (n=0; n < priv->num_handles; n++)
+		status += sprintf(buf+status, "%s ", priv->names[n]);
+	status += sprintf(buf+status, "\n");
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static ssize_t fmux_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t sz)
+{
+	struct fmux_data *priv = dev_get_drvdata(dev);
+	size_t status = -EINVAL;
+	char sbuf[40];
+	int index;
+	mutex_lock(&sysfs_lock);
+	strncpy(sbuf, buf, min((int)sz, 39));
+	sbuf[sz] = '\0';
+
+	if ((index = fmux_match(priv, sbuf)) >= 0) {
+		if (index == priv->active)
+			status = sz;
+		else {
+			status = pinctrl_select_state(priv->pinc, priv->pstate[index]);
+			if (status < 0) {
+				dev_err(priv->dev, "Unable to select state %s\n", priv->names[index]);
+			}
+			else {
+				priv->active = index;
+				status = sz;
+			}
+		}
+	}
+	else {
+		dev_err(priv->dev, "Invalid selection %s\n", sbuf);
+	}
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static DEVICE_ATTR(select, 0644, fmux_show, fmux_store);
+static DEVICE_ATTR(possible, 0444, fmux_opt_show, NULL);
+
+
+static int fmux_probe(struct platform_device *pdev)
+{
+	struct fmux_data *priv;
+	int ret;
+	struct device_node *np = pdev->dev.of_node;
+
+	int status, n;
+
+	if (!np) {
+		dev_err(&pdev->dev, "No DT node found\n");
+		return -EINVAL;
+	}
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv) {
+		dev_err(&pdev->dev, "no memory for state\n");
+		return -ENOMEM;
+	}
+
+	priv->dev = &pdev->dev;
+	platform_set_drvdata(pdev, priv);
+
+	fmux_reparse(priv);
+	if (priv->num_handles < 2) {
+		dev_err(priv->dev, "Too few [%d] handles\n", priv->num_handles);
+		status = -EINVAL;
+		goto deref;
+	}
+	priv->pinc = devm_pinctrl_get(priv->dev);
+	if ( IS_ERR(priv->pinc))
+	{
+		status = -ENODEV;
+		goto deref;
+	}
+	for (n=0; n < priv->num_handles; n++) {
+		priv->pstate[n] = pinctrl_lookup_state(priv->pinc, priv->names[n]);
+	}
+	mutex_lock(&sysfs_lock);
+	ret = pinctrl_select_state(priv->pinc, priv->pstate[0]);
+	if (ret < 0) {
+		dev_err(priv->dev, "Unable to select state %s\n", priv->names[0]);
+		status = ret;
+		mutex_unlock(&sysfs_lock);
+		goto deref;
+	}
+	priv->active = 0;
+	mutex_unlock(&sysfs_lock);
+
+	ret = sysfs_create_file(&pdev->dev.kobj, &dev_attr_select.attr);
+	ret = sysfs_create_file(&pdev->dev.kobj, &dev_attr_possible.attr);
+
+	return 0;
+deref:
+	return status;
+}
+
+static int fmux_remove(struct platform_device *pdev)
+{
+	sysfs_remove_file(&pdev->dev.kobj, &dev_attr_select.attr);
+	sysfs_remove_file(&pdev->dev.kobj, &dev_attr_possible.attr);
+	return 0;
+}
+
+static struct of_device_id fmux_of_match[] = {
+	{
+		.compatible = "datarespons,function-mux",
+	},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, fmux_of_match);
+
+static struct platform_driver fmux_driver = {
+	.driver =
+	{
+		.name = "function-mux",
+		.owner = THIS_MODULE,
+		.of_match_table = fmux_of_match,
+	},
+	.probe = fmux_probe,
+	.remove = fmux_remove,
+};
+
+module_platform_driver(fmux_driver);
+
+MODULE_DESCRIPTION("DT based function pinmux");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:function-mux");
+MODULE_AUTHOR("Hans Christian Lonstad <hcl@datarespons.no>");
diff --git a/drivers/misc/modulated_pwm.c b/drivers/misc/modulated_pwm.c
new file mode 100644
index 000000000000..fdfa8703583f
--- /dev/null
+++ b/drivers/misc/modulated_pwm.c
@@ -0,0 +1,147 @@
+/*
+ * Simple PWM buzzer
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/fb.h>
+#include <linux/backlight.h>
+#include <linux/err.h>
+#include <linux/pwm.h>
+#include <linux/slab.h>
+
+struct modulated_pwm_data {
+	struct pwm_device *pwm;
+	struct device *dev;
+	unsigned int pwmId;
+	struct pwm_state state;
+	int onValue;	/* dutycycle as onValue/256 */
+};
+
+static DEFINE_MUTEX(sysfs_lock);
+
+static ssize_t modulated_pwm_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+	struct modulated_pwm_data *pb = dev_get_drvdata(dev);
+	ssize_t status;
+	mutex_lock(&sysfs_lock);
+	status = sprintf(buf, "%d\n", pb->onValue);
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static ssize_t modulated_pwm_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t sz)
+{
+	struct modulated_pwm_data *pb = dev_get_drvdata(dev);
+	size_t status = sz;
+	int ret;
+	u8 val;
+
+	mutex_lock(&sysfs_lock);
+	ret = kstrtou8(buf, 10, &val);
+	if (ret < 0) {
+		status = ret;
+		goto exit;
+	}
+
+	pb->state.enabled = val == 0 ? false : true;
+	pwm_set_relative_duty_cycle(&pb->state, val, 255);
+
+	if ((ret = pwm_apply_state(pb->pwm, &pb->state)) < 0) {
+		dev_err(dev, "%s: Could not configure PWM", __func__);
+		status = ret;
+		goto exit;
+	} else {
+		pb->onValue = val;
+	}
+
+exit:
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static DEVICE_ATTR(period, 0644, modulated_pwm_show, modulated_pwm_store);
+
+static int modulated_pwm_probe(struct platform_device *pdev)
+{
+	struct modulated_pwm_data *pb;
+	int ret;
+	struct device_node *np = pdev->dev.of_node;
+	u32 period;
+	bool inverted = of_property_read_bool(np, "inverted");
+	if (of_property_read_u32(np, "period", &period))
+		period = 0;
+	else
+		dev_info(&pdev->dev, "Got period of %d ns from DT\n", period);
+
+	pb = devm_kzalloc(&pdev->dev, sizeof(*pb), GFP_KERNEL);
+	if (!pb) {
+		dev_err(&pdev->dev, "no memory for state\n");
+		return -ENOMEM;
+	}
+
+	if (!np) {
+		dev_err(&pdev->dev, "No DT node found\n");
+		return -EINVAL;
+	}
+
+	pb->dev = &pdev->dev;
+	pb->onValue = 0;
+	pb->state.duty_cycle = 0;
+	pb->pwm = devm_of_pwm_get(&pdev->dev, np, NULL);
+	if (IS_ERR(pb->pwm)) {
+		dev_err(&pdev->dev, "unable to request PWM\n");
+		return PTR_ERR(pb->pwm);
+	}
+	pwm_init_state(pb->pwm, &pb->state);
+	dev_dbg(&pdev->dev, "%s: got pwm %d, period %d ns, duty %d ns\n", __func__, pb->pwmId,
+				pb->state.period, pb->state.duty_cycle);
+	pb->state.polarity = inverted ? PWM_POLARITY_INVERSED : PWM_POLARITY_NORMAL;
+	if (period)
+		pb->state.period = period;
+	pwm_apply_state(pb->pwm, &pb->state);
+
+	ret = sysfs_create_file(&pdev->dev.kobj, &dev_attr_period.attr);
+	platform_set_drvdata(pdev, pb);
+	return 0;
+}
+
+static int modulated_pwm_remove(struct platform_device *pdev)
+{
+	struct backlight_device *bl = platform_get_drvdata(pdev);
+	struct modulated_pwm_data *pb = dev_get_drvdata(&bl->dev);
+	sysfs_remove_file(&pdev->dev.kobj, &dev_attr_period.attr);
+	pwm_disable(pb->pwm);
+	return 0;
+}
+
+static struct of_device_id modulated_pwm_of_match[] = {
+	{
+		.compatible = "modulated-pwm",
+	},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, modulated_pwm_of_match);
+
+static struct platform_driver modulated_pwm_driver = {
+	.driver =
+	{
+		.name = "modulated-pwm",
+		.owner = THIS_MODULE,
+		.of_match_table = of_match_ptr(modulated_pwm_of_match),
+	},
+	.probe = modulated_pwm_probe,
+	.remove = modulated_pwm_remove,
+};
+
+module_platform_driver(modulated_pwm_driver);
+
+MODULE_DESCRIPTION("Modulated PWM");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:modulated-pwm");
diff --git a/drivers/misc/pwm_buzzer.c b/drivers/misc/pwm_buzzer.c
new file mode 100644
index 000000000000..cd62788c165f
--- /dev/null
+++ b/drivers/misc/pwm_buzzer.c
@@ -0,0 +1,143 @@
+/*
+ * Simple PWM buzzer
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/fb.h>
+#include <linux/backlight.h>
+#include <linux/err.h>
+#include <linux/pwm.h>
+#include <linux/slab.h>
+
+struct pwm_buzzer_data {
+	struct pwm_device	*pwm;
+	struct device		*dev;
+	unsigned int		period;
+	unsigned int		isOn;
+};
+
+static DEFINE_MUTEX(sysfs_lock);
+
+static ssize_t pwm_buzzer_show(struct device *dev,  struct device_attribute *attr, char *buf) {
+
+	struct pwm_buzzer_data *pb = dev_get_drvdata(dev);
+	ssize_t status;
+	mutex_lock(&sysfs_lock);
+	if (pb->isOn)
+		status = sprintf(buf, "on\n");
+	else
+		status = sprintf(buf, "off\n");
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static ssize_t pwm_buzzer_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t sz) {
+	struct pwm_buzzer_data *pb = dev_get_drvdata(dev);
+	size_t status = sz;
+	int ret;
+
+	mutex_lock(&sysfs_lock);
+	if (sysfs_streq(buf, "on")) {
+		pb->isOn = 1;
+		if ((ret = pwm_config(pb->pwm, pb->period/2, pb->period)) < 0)
+		{
+			dev_err(dev, "%s: Could not configure PWM", __func__);
+			status = ret;
+			goto exit;
+		}
+		else
+		{
+			pwm_enable(pb->pwm);
+			dev_info(dev, "%s: ON with %d ns\n", __func__, pb->period);
+		}
+	}
+	else if (sysfs_streq(buf, "off")) {
+		pb->isOn = 0;
+		pwm_disable(pb->pwm);
+		pwm_config(pb->pwm, 0, pb->period);
+	}
+	else
+		status = -EINVAL;
+
+exit:
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static DEVICE_ATTR(buzz, 0644, pwm_buzzer_show, pwm_buzzer_store);
+
+
+static int pwm_buzzer_probe(struct platform_device *pdev)
+{
+	/* struct platform_pwm_buzzer_data *data = pdev->dev.platform_data; */
+	struct pwm_buzzer_data *pb;
+	int ret;
+	struct device_node *np = pdev->dev.of_node;
+
+	dev_dbg(&pdev->dev, "%s:\n", __func__);
+
+	pb = devm_kzalloc(&pdev->dev, sizeof(*pb), GFP_KERNEL);
+	if (!pb) {
+		dev_err(&pdev->dev, "no memory for state\n");
+		return -ENOMEM;
+	}
+
+	if (!np) {
+		dev_err(&pdev->dev, "No DT node found\n");
+		return -EINVAL;
+	}
+
+	pb->dev = &pdev->dev;
+	pb->isOn = 0;
+
+	pb->pwm = devm_of_pwm_get(&pdev->dev, np, NULL);
+	if (IS_ERR(pb->pwm)) {
+		dev_err(&pdev->dev, "unable to request PWM for buzzer\n");
+		return PTR_ERR(pb->pwm);
+	}
+	pb->period = pwm_get_period(pb->pwm);
+	dev_info(&pdev->dev, "%s: got pwm %d, period %d ns\n", __func__, pb->pwm->pwm, pb->period);
+	ret = sysfs_create_file(&pdev->dev.kobj, &dev_attr_buzz.attr);
+	platform_set_drvdata(pdev, pb);
+	return 0;
+}
+
+static int pwm_buzzer_remove(struct platform_device *pdev)
+{
+	struct backlight_device *bl = platform_get_drvdata(pdev);
+	struct pwm_buzzer_data *pb = dev_get_drvdata(&bl->dev);
+	sysfs_remove_file(&pdev->dev.kobj, &dev_attr_buzz.attr);
+	pwm_config(pb->pwm, 0, pb->period);
+	pwm_disable(pb->pwm);
+	return 0;
+}
+
+
+
+static struct of_device_id pwm_buzzer_of_match[] = {
+	{ .compatible = "pwm-buzzer", },
+	{ }
+};
+
+
+MODULE_DEVICE_TABLE(of, pwm_buzzer_of_match);
+
+static struct platform_driver pwm_buzzer_driver = {
+	.driver		= {
+		.name	= "pwm-buzzer",
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(pwm_buzzer_of_match),
+	},
+	.probe		= pwm_buzzer_probe,
+	.remove		= pwm_buzzer_remove,
+};
+
+module_platform_driver(pwm_buzzer_driver);
+
+MODULE_DESCRIPTION("PWM based Buzzer Driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:pwm-buzzer");
+
-- 
2.34.1

