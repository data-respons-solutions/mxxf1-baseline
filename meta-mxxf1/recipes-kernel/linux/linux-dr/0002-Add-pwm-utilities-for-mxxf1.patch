From 124bee253f20b633113825a2ca28c9724de48b35 Mon Sep 17 00:00:00 2001
From: Hans Christian Lonstad <hcl@datarespons.no>
Date: Tue, 29 Mar 2016 09:03:02 +0200
Subject: [PATCH 2/3] Add pwm utilities for mxxf1

(uses only buzzer)
---
 drivers/misc/Kconfig         |  12 +++
 drivers/misc/Makefile        |   2 +
 drivers/misc/modulated_pwm.c | 140 ++++++++++++++++++++++++++++++++++
 drivers/misc/pwm_buzzer.c    | 144 +++++++++++++++++++++++++++++++++++
 include/linux/pwm_buzzer.h   |  17 +++++
 5 files changed, 315 insertions(+)
 create mode 100644 drivers/misc/modulated_pwm.c
 create mode 100644 drivers/misc/pwm_buzzer.c
 create mode 100644 include/linux/pwm_buzzer.h

diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index 2063f193055a..27454395145f 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -486,6 +486,18 @@ config HISI_HIKEY_USB
 	  switching between the dual-role USB-C port and the USB-A host ports
 	  using only one USB controller.
 
+config PWM_BUZZER
+	tristate "PWM based buzzer"
+	default n
+	help
+		Driver for PWM buzzer
+		
+config MODULATED_PWM
+	tristate "Modulated PWM"
+	default n
+	help
+		Modulated PWM with 8 bit resolution
+
 source "drivers/misc/c2port/Kconfig"
 source "drivers/misc/eeprom/Kconfig"
 source "drivers/misc/cb710/Kconfig"
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 5e27f80f6e0e..e5676cd965c8 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -59,3 +59,5 @@ obj-$(CONFIG_HABANA_AI)		+= habanalabs/
 obj-$(CONFIG_UACCE)		+= uacce/
 obj-$(CONFIG_XILINX_SDFEC)	+= xilinx_sdfec.o
 obj-$(CONFIG_HISI_HIKEY_USB)	+= hisi_hikey_usb.o
+obj-$(CONFIG_PWM_BUZZER) += pwm_buzzer.o
+obj-$(CONFIG_MODULATED_PWM) += modulated_pwm.o
diff --git a/drivers/misc/modulated_pwm.c b/drivers/misc/modulated_pwm.c
new file mode 100644
index 000000000000..ba9a4593ca87
--- /dev/null
+++ b/drivers/misc/modulated_pwm.c
@@ -0,0 +1,140 @@
+/*
+ * Simple PWM buzzer
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/fb.h>
+#include <linux/backlight.h>
+#include <linux/err.h>
+#include <linux/pwm.h>
+#include <linux/slab.h>
+
+struct modulated_pwm_data {
+	struct pwm_device *pwm;
+	struct device *dev;
+	unsigned int pwmId;
+	unsigned int period;
+	u8 onValue;
+};
+
+static DEFINE_MUTEX(sysfs_lock);
+
+static ssize_t modulated_pwm_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+
+	struct modulated_pwm_data *pb = dev_get_drvdata(dev);
+	ssize_t status;
+	mutex_lock(&sysfs_lock);
+	status = sprintf(buf, "%d\n", pb->onValue);
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static ssize_t modulated_pwm_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t sz)
+{
+	struct modulated_pwm_data *pb = dev_get_drvdata(dev);
+	size_t status = sz;
+	int ret, duty_period;
+	u8 val;
+
+	mutex_lock(&sysfs_lock);
+	ret = kstrtou8(buf, 10, &val);
+	if (ret < 0) {
+		status = ret;
+		goto exit;
+	}
+
+	duty_period = ((long) pb->period * val) / 255;
+
+	if ((ret = pwm_config(pb->pwm, duty_period, pb->period)) < 0) {
+		dev_err(dev, "%s: Could not configure PWM", __func__);
+		status = ret;
+		goto exit;
+	} else {
+		pb->onValue = val;
+	}
+
+	exit: mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static DEVICE_ATTR(period, 0644, modulated_pwm_show, modulated_pwm_store);
+
+static int modulated_pwm_probe(struct platform_device *pdev)
+{
+	struct modulated_pwm_data *pb;
+	int ret;
+	struct device_node *np = pdev->dev.of_node;
+	bool inverted = of_property_read_bool(np, "inverted");
+
+	pb = devm_kzalloc(&pdev->dev, sizeof(*pb), GFP_KERNEL);
+	if (!pb) {
+		dev_err(&pdev->dev, "no memory for state\n");
+		return -ENOMEM;
+	}
+
+	if (!np) {
+		dev_err(&pdev->dev, "No DT node found\n");
+		return -EINVAL;
+	}
+
+	pb->dev = &pdev->dev;
+	pb->onValue = 0;
+
+	pb->pwm = devm_of_pwm_get(&pdev->dev, np, NULL);
+	if (IS_ERR(pb->pwm)) {
+		dev_err(&pdev->dev, "unable to request PWM\n");
+		return PTR_ERR(pb->pwm);
+	}
+	pb->period = pwm_get_period(pb->pwm);
+	dev_dbg(&pdev->dev, "%s: got pwm %d, period %d ns\n", __func__, pb->pwmId,
+			pb->period);
+	ret = sysfs_create_file(&pdev->dev.kobj, &dev_attr_period.attr);
+	if (inverted)
+		pwm_set_polarity(pb->pwm, PWM_POLARITY_INVERSED);
+	pwm_config(pb->pwm, 0, pb->period);
+	pwm_enable(pb->pwm);
+	platform_set_drvdata(pdev, pb);
+	return 0;
+}
+
+static int modulated_pwm_remove(struct platform_device *pdev)
+{
+	struct backlight_device *bl = platform_get_drvdata(pdev);
+	struct modulated_pwm_data *pb = dev_get_drvdata(&bl->dev);
+	sysfs_remove_file(&pdev->dev.kobj, &dev_attr_period.attr);
+	pwm_config(pb->pwm, 0, pb->period);
+	pwm_disable(pb->pwm);
+	return 0;
+}
+
+static struct of_device_id modulated_pwm_of_match[] = {
+	{
+		.compatible = "modulated-pwm",
+	},
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, modulated_pwm_of_match);
+
+static struct platform_driver modulated_pwm_driver = {
+	.driver =
+	{
+		.name = "modulated-pwm",
+		.owner = THIS_MODULE,
+		.of_match_table = of_match_ptr(modulated_pwm_of_match),
+	},
+	.probe = modulated_pwm_probe,
+	.remove = modulated_pwm_remove,
+};
+
+module_platform_driver(modulated_pwm_driver);
+
+MODULE_DESCRIPTION("Modulated PWM");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:modulated-pwm");
diff --git a/drivers/misc/pwm_buzzer.c b/drivers/misc/pwm_buzzer.c
new file mode 100644
index 000000000000..bf8287be32ab
--- /dev/null
+++ b/drivers/misc/pwm_buzzer.c
@@ -0,0 +1,144 @@
+/*
+ * Simple PWM buzzer
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/fb.h>
+#include <linux/backlight.h>
+#include <linux/err.h>
+#include <linux/pwm.h>
+#include <linux/pwm_buzzer.h>
+#include <linux/slab.h>
+
+struct pwm_buzzer_data {
+	struct pwm_device	*pwm;
+	struct device		*dev;
+	unsigned int		period;
+	unsigned int		isOn;
+};
+
+static DEFINE_MUTEX(sysfs_lock);
+
+static ssize_t pwm_buzzer_show(struct device *dev,  struct device_attribute *attr, char *buf) {
+
+	struct pwm_buzzer_data *pb = dev_get_drvdata(dev);
+	ssize_t status;
+	mutex_lock(&sysfs_lock);
+	if (pb->isOn)
+		status = sprintf(buf, "on\n");
+	else
+		status = sprintf(buf, "off\n");
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static ssize_t pwm_buzzer_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t sz) {
+	struct pwm_buzzer_data *pb = dev_get_drvdata(dev);
+	size_t status = sz;
+	int ret;
+
+	mutex_lock(&sysfs_lock);
+	if (sysfs_streq(buf, "on")) {
+		pb->isOn = 1;
+		if ((ret = pwm_config(pb->pwm, pb->period/2, pb->period)) < 0)
+		{
+			dev_err(dev, "%s: Could not configure PWM", __func__);
+			status = ret;
+			goto exit;
+		}
+		else
+		{
+			pwm_enable(pb->pwm);
+			dev_info(dev, "%s: ON with %d ns\n", __func__, pb->period);
+		}
+	}
+	else if (sysfs_streq(buf, "off")) {
+		pb->isOn = 0;
+		pwm_disable(pb->pwm);
+		pwm_config(pb->pwm, 0, pb->period);
+	}
+	else
+		status = -EINVAL;
+
+exit:
+	mutex_unlock(&sysfs_lock);
+	return status;
+}
+
+static DEVICE_ATTR(buzz, 0644, pwm_buzzer_show, pwm_buzzer_store);
+
+
+static int pwm_buzzer_probe(struct platform_device *pdev)
+{
+	/* struct platform_pwm_buzzer_data *data = pdev->dev.platform_data; */
+	struct pwm_buzzer_data *pb;
+	int ret;
+	struct device_node *np = pdev->dev.of_node;
+
+	dev_dbg(&pdev->dev, "%s:\n", __func__);
+
+	pb = devm_kzalloc(&pdev->dev, sizeof(*pb), GFP_KERNEL);
+	if (!pb) {
+		dev_err(&pdev->dev, "no memory for state\n");
+		return -ENOMEM;
+	}
+
+	if (!np) {
+		dev_err(&pdev->dev, "No DT node found\n");
+		return -EINVAL;
+	}
+
+	pb->dev = &pdev->dev;
+	pb->isOn = 0;
+
+	pb->pwm = devm_of_pwm_get(&pdev->dev, np, NULL);
+	if (IS_ERR(pb->pwm)) {
+		dev_err(&pdev->dev, "unable to request PWM for buzzer\n");
+		return PTR_ERR(pb->pwm);
+	}
+	pb->period = pwm_get_period(pb->pwm);
+	dev_info(&pdev->dev, "%s: got pwm %d, period %d ns\n", __func__, pb->pwm->pwm, pb->period);
+	ret = sysfs_create_file(&pdev->dev.kobj, &dev_attr_buzz.attr);
+	platform_set_drvdata(pdev, pb);
+	return 0;
+}
+
+static int pwm_buzzer_remove(struct platform_device *pdev)
+{
+	struct backlight_device *bl = platform_get_drvdata(pdev);
+	struct pwm_buzzer_data *pb = dev_get_drvdata(&bl->dev);
+	sysfs_remove_file(&pdev->dev.kobj, &dev_attr_buzz.attr);
+	pwm_config(pb->pwm, 0, pb->period);
+	pwm_disable(pb->pwm);
+	return 0;
+}
+
+
+
+static struct of_device_id pwm_buzzer_of_match[] = {
+	{ .compatible = "pwm-buzzer", },
+	{ }
+};
+
+
+MODULE_DEVICE_TABLE(of, pwm_buzzer_of_match);
+
+static struct platform_driver pwm_buzzer_driver = {
+	.driver		= {
+		.name	= "pwm-buzzer",
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(pwm_buzzer_of_match),
+	},
+	.probe		= pwm_buzzer_probe,
+	.remove		= pwm_buzzer_remove,
+};
+
+module_platform_driver(pwm_buzzer_driver);
+
+MODULE_DESCRIPTION("PWM based Buzzer Driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:pwm-buzzer");
+
diff --git a/include/linux/pwm_buzzer.h b/include/linux/pwm_buzzer.h
new file mode 100644
index 000000000000..b026ae270ae8
--- /dev/null
+++ b/include/linux/pwm_buzzer.h
@@ -0,0 +1,17 @@
+/*
+ * pwm_buzzer.h
+ *
+ *  Created on: 19. des. 2013
+ *      Author: hcl
+ */
+
+#ifndef PWM_BUZZER_H_
+#define PWM_BUZZER_H_
+
+struct platform_pwm_buzzer_data {
+	int pwm_id;
+	unsigned int pwm_period_ns;
+};
+
+
+#endif /* PWM_BUZZER_H_ */
-- 
2.25.1

